@use 'variables';
@use 'typography';
@use "elements";

body {
    color: variables.$default-text-color;
    font-family: variables.$font-stack;
    font-size: typography.$fs-md;
    font-weight: typography.$fw-regular;
    line-height: 1.6;
}

section {
  margin-bottom: variables.$mb-lg;
}

h1 {
  color: variables.$primary;
  font-size: typography.$fs-xxl;
  font-weight: typography.$fw-bold;
}

h2 {
  color: variables.$secondary;
  font-size: typography.$fs-xl;
  font-weight: typography.$fw-semibold;
}

h3 {
  color: variables.$secondary;
  font-size: typography.$fs-lg;
  font-weight: typography.$fw-semibold;
}

h4 {
  color: variables.$secondary;
  font-size: typography.$fs-lg;
  font-weight: typography.$fw-medium;
}

p {
    margin-bottom: variables.$mb-md;
}

small {
  font-size: typography.$fs-sm;
  font-weight: typography.$fw-regular;
}

// Table
table {
  @include elements.table-style;
    // width: 100%;
    // border-collapse: collapse;
}
  
th, td {
    border: 1px solid variables.$table-border-color; // Note the namespace
    text-align: left;
    padding: 8px;
    font-size: typography.$fs-md;
    font-weight: typography.$fw-light;
}
  
th {
    background-color: variables.$table-header-bg; // Access using namespace
    color: variables.$table-header-color; // Access using namespace
    font-size: typography.$fs-md;
    font-weight: typography.$fw-medium;
}

// Form
form {
  @include elements.form($bgColor: variables.$light, $text-color: variables.$dark);
}

// Form desktop breakpoint
@media (min-width: 1200px) {
  form {
    @include elements.form($bgColor: variables.$light, $text-color: variables.$dark, $width: 50%);
  }
}

// Button
// default button
.btn {
    @include elements.btn;
}

// outline button
.btn-outline {
    @include elements.btn;
    @include elements.btn-outline;
}

//light button
.btn-light {
    @include elements.btn($bgColor: variables.$light, $text-color: variables.$dark);
    &:hover {
        background-color: darken(variables.$light, 10%);
    }
}
// dark button
.btn-dark {
    @include elements.btn($bgColor: variables.$dark, $text-color: variables.$white);
    &:hover {
        background-color: darken(variables.$dark, 10%);
    }
}

//Container styles
.container {
    width: calc(100% - 40px);
    margin-right: auto;
    margin-left: auto;
  }
  
  @media (min-width: 576px) {
    .container {
      max-width: variables.$max-width-sm;
    }
  }
  
  @media (min-width: 768px) {
    .container {
      max-width: variables.$max-width-md;
    }
  }
  
  @media (min-width: 992px) {
    .container {
      max-width: variables.$max-width-lg;
    }
  }
  
  @media (min-width: 1200px) {
    .container {
      max-width: variables.$max-width-xl;
    }
  }

  //Grid Styles
  // Grid container
.grid-container {
    display: grid;
    grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));
    grid-gap: variables.$p-lg;
    justify-content: space-around;
  }
  
  // Grid item
  .grid-item {
    background-color: variables.$light;
    padding: variables.$p-lg;
    border: 1px solid variables.$primary;
    border-radius: 4px;
    text-align: center;
  }
  
  // Responsive grid columns
  @for $i from 1 through 6 {
    .grid-col-#{$i} {
      grid-column: span $i;
    }
  }
  
  //List styles
  
  ul, ol {
    margin-bottom: variables.$mb-md;
    padding-left: variables.$ps-lg; 
    list-style-type: circle;
  }
  
  ol {
    list-style-type: decimal; 
  }
  
  li {
    margin-bottom: variables.$mb-sm; 
  }

  .list-group {
    display: flex;
    flex-direction: column;
    padding-left: variables.$ps-0;
    margin-bottom: variables.$mb-0;
  }
  
  .list-group-item {
    position: relative;
    display: block;
    padding: variables.$p-md;
    margin-bottom: variables.$mb-0;
    background-color: variables.$white;
    border: 1px solid variables.$dark;
  }
  
  .list-group-item:last-child {
    margin-bottom: variables.$mb-0;
  }
  
  // Image styles
.img-fluid {
    max-width: 100%;
    height: auto;
  }
  
  // Link styles
  a {
    color: variables.$primary;
    text-decoration: underline;
    transition: color 0.3s ease-in-out;
  
    &:hover {
      color: darken(variables.$primary, 10%);
      text-decoration: none;
    }
  }